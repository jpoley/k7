{
  "repo_notes": [
    {
      "content": "Start the wiki with an Architecture section that opens with diagrams explaining how Kubernetes (single-node K3s), Kata, and Firecracker fit together. Do NOT show multiple nodes yet â€” only a single K3s node is supported currently.",
      "author": "Editors"
    },
    {
      "content": "Katakate (k7) provides self-hosted secure VM sandboxes on Kubernetes using Kata + Firecracker. Code lives under src/k7 (CLI, API, core) and src/katakate (Python SDK). Use this as the source of truth for deep architecture and behavior; the Mintlify docs under docs/ are user-facing.",
      "author": "Maintainers"
    },
    {
      "content": "Security is central: VM isolation via Kata/Firecracker + Jailer, default capability drop, non-root options, Seccomp RuntimeDefault, deny-all ingress, optional egress whitelist with DNS allowance. Keep this model explicit and front-and-center.",
      "author": "Maintainers"
    },
    {
      "content": "Core flows to document deeply: sandbox lifecycle (create/list/delete), before_script execution and readiness probe, egress lockdown policy generation, metrics fetching via metrics.k8s.io. Implemented in src/k7/core/core.py.",
      "author": "Maintainers"
    },
    {
      "content": "API key management (generation, storage, expiry, last_used) lives in src/k7/api/main.py and CLI commands. Keys are stored at /etc/k7/api_keys.json (0600).",
      "author": "Maintainers"
    },
    {
      "content": "The API is deployed with Docker Compose using embedded compose/Dockerfile resolved at runtime by K7Core._get_embedded_docker_compose(). Explain kubeconfig override behavior and Cloudflared tunnel URL discovery.",
      "author": "Maintainers"
    },
    {
      "content": "Packaging: PyPI ships only src/katakate; CLI/API are packaged as .deb under dist/ via src/k7/cli/build.sh. Do not conflate these paths in installation instructions.",
      "author": "Maintainers"
    },
    {
      "content": "Examples and templates live in examples/ (sandbox YAMLs) and tutorials/ (LangChain agent). Reuse when explaining quickstarts.",
      "author": "Maintainers"
    },
    {
      "content": "Known issue: Jailer may be ignored by Kata despite configuration; see README Known issues. Mention as caveat.",
      "author": "Maintainers"
    }
  ],
  "pages": [
    {
      "title": "Architecture",
      "purpose": "Kubernetes + K3s, Kata, Firecracker, Devmapper thin-pool; how components interact (diagrams first)",
      "parent": null,
      "page_notes": [
        {
          "content": "Begin the page with a large, single-node diagram: one K3s node on the host OS. Inside it, depict a Kubernetes Pod configured with runtimeClass 'kata' that launches a Kata microVM (Firecracker). Inside the microVM, show the kata-agent, the guest rootfs, and the container root filesystem. Clearly label boundaries: Host OS, Kubernetes, VM boundary (Firecracker), and Container."
        },
        {
          "content": "Show the storage path: container image layers resolved by containerd's devmapper snapshotter into a thin pool of logical volumes (LVs). Each sandbox gets an LV snapshot (thin-provisioned). Explain copy-on-write behavior at the disk block level (blocks are shared until written); memory is not shared across microVMs."
        },
        {
          "content": "Illustrate how the snapshot LV is attached to the Firecracker microVM as a block device and becomes the container rootfs inside the guest. Call out where 'before_script' writes go (into the snapshot)."
        },
        {
          "content": "Add a second, focused diagram for storage only: Image layers -> devmapper thin pool -> per-sandbox snapshot LV (CoW) -> Firecracker drive -> guest mount -> container rootfs."
        },
        {
          "content": "Important: depict only a single node (single K3s). Avoid multi-node cluster visuals for now. Optionally add a small 'Coming soon' note about multi-node."
        },
        {
          "content": "Make it clear the single node can run many sandbox pods concurrently (dozens per node) without drawing them all: add a small annotation/arrow like '... more kata pods' with a brief capacity note."
        }
      ]
    },
    {
      "title": "Katakate Overview",
      "purpose": "What K7 is, capabilities, core value, links to docs and repo structure",
      "parent": null
    },
    {
      "title": "Installation & Node Setup",
      "purpose": "Node requirements, APT install, Ansible-driven installer flow and progress events",
      "parent": null
    },
    {
      "title": "CLI Usage",
      "purpose": "How to manage sandboxes from nodes; commands: install, create, list, delete, delete-all, logs, shell, top",
      "parent": null,
      "page_notes": [
        { "content": "Reference src/k7/cli/k7.py for exact options and behaviors." }
      ]
    },
    {
      "title": "Sandbox Configuration (k7.yaml)",
      "purpose": "Explain YAML fields (name, image, namespace, limits, env_file, before_script, egress_whitelist, security flags cap_add/cap_drop, non-root)",
      "parent": "CLI Usage"
    },
    {
      "title": "API Overview",
      "purpose": "FastAPI service, auth via API keys, error schema, health",
      "parent": null,
      "page_notes": [
        { "content": "Entry point: src/k7/api/main.py; app title/version from k7.__version__." }
      ]
    },
    {
      "title": "Authentication & API Keys",
      "purpose": "Key creation/list/revoke, storage, expiry, last_used update, headers (X-API-Key or Bearer)",
      "parent": "API Overview"
    },
    {
      "title": "API Endpoints",
      "purpose": "REST endpoints for sandboxes, exec, metrics, health with request/response shapes",
      "parent": "API Overview"
    },
    {
      "title": "API: Sandboxes",
      "purpose": "POST /api/v1/sandboxes, GET list/get, DELETE single/all, Location header behavior",
      "parent": "API Endpoints"
    },
    {
      "title": "API: Exec",
      "purpose": "POST /api/v1/sandboxes/{name}/exec to run commands; response fields",
      "parent": "API Endpoints"
    },
    {
      "title": "API: Metrics",
      "purpose": "GET /api/v1/sandboxes/metrics; source: metrics.k8s.io; units parsing",
      "parent": "API Endpoints"
    },
    {
      "title": "API: Health",
      "purpose": "GET /health and root",
      "parent": "API Endpoints"
    },
    {
      "title": "Python SDK",
      "purpose": "Using katakate Client/AsyncClient to create/list/exec/delete sandboxes; install via pip",
      "parent": null,
      "page_notes": [
        { "content": "Point to src/katakate/client.py; mirror README examples and types." }
      ]
    },
    {
      "title": "Security Model",
      "purpose": "Explain VM isolation, seccomp, capabilities, non-root modes at pod/container level, network isolation strategy",
      "parent": null
    },
    {
      "title": "Network Policies",
      "purpose": "Egress whitelist generation + kube-dns allow; deny-all ingress policy created for sandbox label selector",
      "parent": "Security Model"
    },
    {
      "title": "Before Script Lifecycle",
      "purpose": "How before_script runs inside main container; readiness gating file; log streaming behavior in CLI",
      "parent": "Sandbox Configuration (k7.yaml)"
    },
    {
      "title": "Metrics and Monitoring",
      "purpose": "How top command parses CPU n/u/m units and memory Ki/Mi/Gi; limitations",
      "parent": null
    },
    {
      "title": "Packaging & Releases",
      "purpose": "Distribution strategy: PyPI for SDK, Debian for CLI/API; build and install flow",
      "parent": null
    },
    {
      "title": "Tutorials",
      "purpose": "Walk through LangChain ReAct agent with K7 sandbox tool",
      "parent": null
    },
    {
      "title": "Development",
      "purpose": "Build from source, API container build/run, repo layout, contribution pointers",
      "parent": null
    },
    {
      "title": "Known Issues & Caveats",
      "purpose": "Document current limitations (Jailer ignore), roadmap items",
      "parent": null
    }
  ]
}


